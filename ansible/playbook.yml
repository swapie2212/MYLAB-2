---
- name: Setup DevOps Tools on EC2
  hosts: all
  become: true

  vars:
    jenkins_repo_key: https://pkg.jenkins.io/debian-stable/jenkins.io.key
    jenkins_repo: deb https://pkg.jenkins.io/debian-stable binary/
    sonar_db: sonarqube
    sonar_user: sonar
    sonar_pass: sonar
    sonar_version: 9.9.1.69595
    jenkins_admin_user: admin
    jenkins_admin_password: admin

  tasks:

    # -------------------------------
    # Base System Setup
    # -------------------------------
    - name: Update apt cache
      apt:
        update_cache: yes
      tags: base

    - name: Install base packages
      apt:
        name:
          - openjdk-17-jdk
          - curl
          - gnupg
          - software-properties-common
          - unzip
          - fontconfig
          - wget
        state: present
      tags: base

    # -------------------------------
    # Docker Installation
    # -------------------------------
    - name: Ensure Docker group exists
      group:
        name: docker
        state: present
      tags: docker

    - name: Install Docker
      apt:
        name: docker.io
        state: present
      tags: docker

    - name: Add users to Docker group
      user:
        name: "{{ item }}"
        groups: docker
        append: yes
      loop:
        - ubuntu
        - jenkins
      ignore_errors: yes  # In case user does not exist
      tags: docker

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started
      tags: docker

    - name: Create Docker CLI plugin directory
      file:
        path: /usr/local/lib/docker/cli-plugins
        state: directory
        mode: '0755'
      tags: docker

    - name: Download Docker Buildx plugin
      get_url:
        url: https://github.com/docker/buildx/releases/download/v0.14.0/buildx-v0.14.0.linux-amd64
        dest: /usr/local/lib/docker/cli-plugins/docker-buildx
        mode: '0755'
      tags: docker

    # -------------------------------
    # Jenkins Installation
    # -------------------------------
    - name: Add Jenkins GPG key
      apt_key:
        url: "{{ jenkins_repo_key }}"
        state: present
      tags: jenkins

    - name: Add Jenkins APT repository
      apt_repository:
        repo: "{{ jenkins_repo }}"
        state: present
      tags: jenkins

    - name: Install Jenkins
      apt:
        name: jenkins
        state: present
      tags: jenkins

    - name: Enable and start Jenkins service
      systemd:
        name: jenkins
        enabled: yes
        state: started
      tags: jenkins

    - name: Restart Jenkins (ensure Docker group applies)
      systemd:
        name: jenkins
        state: restarted
      tags: jenkins

    # -------------------------------
    # Jenkins Plugin Install
    # -------------------------------
    - name: Install Jenkins plugins
      shell: |
        JENKINS_CLI=/var/lib/jenkins/jenkins-cli.jar
        wget -q http://localhost:8080/jnlpJars/jenkins-cli.jar -O $JENKINS_CLI
        java -jar $JENKINS_CLI -s http://localhost:8080 -auth {{ jenkins_admin_user }}:{{ jenkins_admin_password }} install-plugin \
          docker-plugin \
          docker-workflow \
          git \
          workflow-aggregator \
          pipeline-stage-view \
          workflow-job \
          sonar \
          aws-credentials \
          -deploy
      environment:
        JENKINS_HOME: /var/lib/jenkins
      ignore_errors: true  # Jenkins may not be ready
      tags: jenkins

    # ------------------------------------
    # SonarQube & PostgreSQL via Docker
    # ------------------------------------
    - name: Create Docker network for SonarQube
      shell: docker network create sonarnet || true
      tags: sonarqube
    
    - name: Run PostgreSQL container for SonarQube
      shell: |
        docker rm -f sonardb || true
        docker run -d \
          --name sonardb \
          --network sonarnet \
          -e POSTGRES_USER={{ sonar_user }} \
          -e POSTGRES_PASSWORD={{ sonar_pass }} \
          -e POSTGRES_DB={{ sonar_db }} \
          postgres:13
      tags: sonarqube

    - name: Run SonarQube container
      shell: |
        docker rm -f sonarqube || true
        docker run -d \
          --name sonarqube \
          --network sonarnet \
          -p 9000:9000 \
          -e SONAR_JDBC_URL=jdbc:postgresql://sonardb:5432/{{ sonar_db }} \
          -e SONAR_JDBC_USERNAME={{ sonar_user }} \
          -e SONAR_JDBC_PASSWORD={{ sonar_pass }} \
          sonarqube:{{ sonar_version }}-community
      tags: sonarqube

    - name: Wait for SonarQube to be ready
      wait_for:
        port: 9000
        delay: 30
        timeout: 300
        state: started
      tags: sonarqube
      
    # -------------------------------
    # Trivy Installation
    # -------------------------------
    - name: Install Trivy (vulnerability scanner)
      shell: |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee /etc/apt/sources.list.d/trivy.list
        apt update
        apt install -y trivy
      args:
        executable: /bin/bash
      tags: trivy

    # -------------------------------
    # Kubernetes CLI Tools
    # -------------------------------
    - name: Install AWS CLI
      shell: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
        unzip -o /tmp/awscliv2.zip -d /tmp
        /tmp/aws/install --update
      tags: aws

    - name: Install kubectl
      get_url:
        url: https://dl.k8s.io/release/v1.29.2/bin/linux/amd64/kubectl
        dest: /usr/local/bin/kubectl
        mode: '0755'
      tags: k8s

    - name: Install Helm
      shell: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      args:
        executable: /bin/bash
      tags: k8s
